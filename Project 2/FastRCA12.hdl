// Alisa Lin 228008046

/**
 * Optimizes the carry propagation delay along RCA4 boundaries
 * using duplication and parallel assembly of logic 
 * The chip performs out=a+b
 * Both inputs a and b are in UNSIGNED format
 * carry output reflects the overflow 
 */


CHIP FastRCA12 {
    IN a[12], b[12];
    OUT out[12], carry;
	
    PARTS:

    // add first 4 bits
    RCA4(a=a[0..3],b=b[0..3],cIn=false,sum=out[0..3],cout=carry1); 

    // two possible cases for adding bits 4-7, carryIn is False or carryIn is True 
    RCA4(a=a[4..7],b=b[4..7],cIn=false,sum=sum1,cout=carry2);
    RCA4(a=a[4..7],b=b[4..7],cIn=true,sum=sum2,cout=carry3);
    
    // Mux4 (because sum1 and sum2 are 4-bits) and the selector is carry1 (either F or T)
    Mux4(a=sum1,b=sum2,sel=carry1,out=out[4..7]); // implement Mux4 (sum1 or sum2, sel = carry 1)
    Mux(a=carry2,b=carry3,sel=carry1,out=carry4); // implement Mux2 (carry2 or carry3, sel = carry 1)
    
    // repeat for sum 8..11, use carry from second level -- two possible cases for adding bits 8-11, carryIn is False or carryIn is True 
    RCA4(a=a[8..11],b=b[8..11],cIn=false,sum=sum3,cout=carry5); 
    RCA4(a=a[8..11],b=b[8..11],cIn=true,sum=sum4,cout=carry6);

    Mux4(a=sum3,b=sum4,sel=carry4,out=out[8..11]); // implement Mux4 (sum3 or sum4)
    Mux(a=carry5,b=carry6,sel=carry4,out=carry); // implement Mux2 (carry5 or carry6)
    
}